package com.dongjin.hospitalapp.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dongjin.hospitalapp.data.Hospital
import com.dongjin.hospitalapp.repository.HospitalRepository
import com.dongjin.hospitalapp.util.HospitalCodeMapper
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

@HiltViewModel
class HospitalViewModel @Inject constructor(
    private val repository: HospitalRepository
) : ViewModel() {

    private val firestore = FirebaseFirestore.getInstance()

    private val _hospitalList = MutableStateFlow<List<Hospital>>(emptyList())
    val hospitalList: StateFlow<List<Hospital>> = _hospitalList

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    private val _hospitals = MutableStateFlow<List<Hospital>>(emptyList())
    val hospitals: StateFlow<List<Hospital>> = _hospitals

    private var lastQueryKey: String? = null  // ‚úÖ Ï§ëÎ≥µ ÏøºÎ¶¨ Î∞©ÏßÄ ÌÇ§
    fun fetchHospitals(
        name: String,
        typeCodes: List<String>,
        regionCodes: List<String>
    ) {
        val queryKey = "$name|${typeCodes.joinToString()}|${regionCodes.joinToString()}"
        if (queryKey == lastQueryKey && _hospitalList.value.isNotEmpty()) {
            Log.d("HospitalFetch", "‚ùé Ï§ëÎ≥µ Í≤ÄÏÉâ ÏÉùÎûµ")
            return
        }
        lastQueryKey = queryKey

        viewModelScope.launch {
            Log.d("HospitalFetch", "‚úÖ Í≤ÄÏÉâ ÏãúÏûë: name=$name / type=$typeCodes / region=$regionCodes")
            _isLoading.value = true

            var query: Query = firestore.collection("hospitals")

            // üî∏ ÏßÄÏó≠ÏùÄ Firestore ÏøºÎ¶¨Î°ú ÌïÑÌÑ∞ÎßÅ
            if (regionCodes.isNotEmpty()) {
                query = query.whereIn("sido", regionCodes)
                Log.d("HospitalFetch", "üìå ÏßÄÏó≠ ÌïÑÌÑ∞: $regionCodes")
            }

            query.get()
                .addOnSuccessListener { snapshot ->
                    Log.d("HospitalFetch", "üì¶ Î¨∏ÏÑú ÏàòÏã†: ${snapshot.size()}Í∞ú")

                    var result = snapshot.documents.mapNotNull { it.toObject(Hospital::class.java) }

                    result = result.filter { hosp ->
                        // üî∏ Ï¢ÖÎ≥Ñ OR ÌïÑÌÑ∞ (Ïï± ÎÇ¥)
                        val typeMatch = if (typeCodes.isNotEmpty()) {
                            val typeNames = typeCodes.map { HospitalCodeMapper.getTypeNameByCode(it) }
                            typeNames.contains(hosp.type)
                        } else true

                        // üî∏ Î≥ëÏõêÎ™Ö Í≤ÄÏÉâ
                        val nameMatch = if (name.isNotBlank()) {
                            hosp.name?.contains(name, true) == true
                        } else true

                        val match = typeMatch && nameMatch
                        Log.d("HospitalMatch", "üß™ ${hosp.name} - Ï¢ÖÎ≥Ñ:$typeMatch / Ïù¥Î¶Ñ:$nameMatch ‚Üí $match")
                        match
                    }

                    Log.d("HospitalFetch", "‚úÖ ÏµúÏ¢Ö Í≤∞Í≥º: ${result.size}Í∞ú")
                    _hospitalList.value = result
                    _isLoading.value = false
                }
                .addOnFailureListener { e ->
                    Log.e("HospitalFetch", "‚ùå ÏøºÎ¶¨ Ïã§Ìå®", e)
                    _isLoading.value = false
                }
        }
    }

    fun resetHospitalList() {
        Log.d("HospitalFetch", "üîÑ Î≥ëÏõê Î¶¨Ïä§Ìä∏ Ï¥àÍ∏∞Ìôî ÏöîÏ≤≠")
        _hospitalList.value = emptyList()
        lastQueryKey = null
    }

    fun fetchAllHospitals() {
        viewModelScope.launch {
            Log.d("HospitalFetch", "‚úÖ Ï†ÑÏ≤¥ Î≥ëÏõê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë")
            _isLoading.value = true

            firestore.collection("hospitals")
                .get()
                .addOnSuccessListener { snapshot ->
                    Log.d("HospitalFetch", "üì¶ Ï†ÑÏ≤¥ Î¨∏ÏÑú ÏàòÏã†: ${snapshot.size()}Í∞ú")
                    val result = snapshot.documents.mapNotNull { it.toObject(Hospital::class.java) }
                    _hospitals.value = result
                    _isLoading.value = false
                }
                .addOnFailureListener { e ->
                    Log.e("HospitalFetch", "‚ùå Ï†ÑÏ≤¥ Î≥ëÏõê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®", e)
                    _isLoading.value = false
                }
        }
    }
}
